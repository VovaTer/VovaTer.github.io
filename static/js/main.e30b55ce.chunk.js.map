{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleSelect","selected","state","numFrom","setState","numTo","handleMove","pyramids","fromLastWidth","length","toLastWidth","console","log","error","setTimeout","push","pop","totalNum","appStyles","height","this","className","style","map","pyramid","pyramidIndex","onClick","key","pyramidItem","pyramidItemIndex","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAuEeA,G,kBAnEZ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAaTC,aAAe,SAACC,GACa,UAAvB,EAAKC,MAAMC,QACb,EAAKC,SAAS,CAACD,QAAQF,IAEnB,EAAKC,MAAMC,UAAYF,EACzB,EAAKG,SAAS,CAACD,QAAQ,UAEvB,EAAKC,SAAS,CAACC,MAAMJ,IAAW,WAC9B,EAAKK,WAAW,EAAKJ,MAAMC,QAAS,EAAKD,MAAMG,WAtBnC,EA4BpBC,WAAa,SAACH,EAASE,GACrB,IAAME,EAAQ,YAAO,EAAKL,MAAMK,UAC1BC,EAAgBD,EAASJ,GAASI,EAASJ,GAASM,OAAS,GAC7DC,EAAcH,EAASF,GAAOE,EAASF,GAAOI,OAAS,GAC7DE,QAAQC,IAAI,gBAAiBJ,GAC7BG,QAAQC,IAAI,cAAeF,GACvBF,EAAgBE,IAAgBF,EAClC,EAAKJ,SAAS,CAACD,QAAQ,QAASE,MAAO,QAASQ,OAAO,IAAO,WAC5DC,YAAW,WACT,EAAKV,SAAS,CAACS,OAAO,MACrB,SAIPN,EAASF,GAAOU,KAAKR,EAASJ,GAASI,EAASJ,GAASM,OAAS,IAClEF,EAASJ,GAASa,MAClB,EAAKZ,SAAS,CAACG,WAAUJ,QAAQ,QAASE,MAAO,QAAQY,SAAU,EAAKf,MAAMe,SAAW,MA1CxF,EAAKf,MAAQ,CACZC,QAAS,QACTE,MAAO,QACPY,SAAU,EACVV,SAAU,CACR,GACA,GACA,CAAC,IAAK,GAAI,GAAI,GAAI,MATJ,E,sEA+CT,IAAD,OACJW,EAAY,CAACC,OAAO,GAAD,OAAqG,IAA/FC,KAAKlB,MAAMK,SAAS,GAAGE,OAASW,KAAKlB,MAAMK,SAAS,GAAGE,OAASW,KAAKlB,MAAMK,SAAS,GAAGE,QAAa,GAA1G,OACvB,OACE,6BAASY,UAAWD,KAAKlB,MAAMW,MAAQ,QAAS,MAC9C,+BAAQO,KAAKlB,MAAMe,UACnB,yBAAKI,UAAU,MAAOC,MAAOJ,GAC1BE,KAAKlB,MAAMK,SAASgB,KAAI,SAACC,EAASC,GACjC,OAAQ,wBAAIJ,UAAWI,IAAiB,EAAKvB,MAAMC,QAAU,WAAa,KAAMuB,QAAS,kBAAM,EAAK1B,aAAayB,IAAgBE,IAAKF,GAAeD,EAAQD,KAAI,SAACK,EAAaC,GACnK,IAAIP,EAAQ,CAACQ,MAAM,GAAD,OAAKF,EAAL,MAClB,OAAO,wBAAIN,MAAOA,EAAOK,IAAKE,GAAmBD,gB,GAzDvDG,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e30b55ce.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component  { \n   constructor(props) {\n     super(props)\n     this.state = {\n      numFrom: 'empty',\n      numTo: 'empty',\n      totalNum: 0,\n      pyramids: [\n        [],\n        [],\n        [100, 80, 60, 40, 20],\n      ]\n     }\n   }\n\n  handleSelect = (selected) => {\n    if (this.state.numFrom === 'empty') { // If we haven't yet selected 'from'\n      this.setState({numFrom:selected})\n    } else { \n      if (this.state.numFrom === selected) { // If we select the same as already selected\n        this.setState({numFrom:'empty'})\n      } else {\n        this.setState({numTo:selected}, () => {  // Then we're probably selecting 'to'\n          this.handleMove(this.state.numFrom, this.state.numTo)\n        })\n      }\n    }\n  }\n\n  handleMove = (numFrom, numTo) => {\n    const pyramids = [...this.state.pyramids]\n    const fromLastWidth = pyramids[numFrom][pyramids[numFrom].length - 1]\n    const toLastWidth = pyramids[numTo][pyramids[numTo].length - 1]\n    console.log('fromLastWidth', fromLastWidth);\n    console.log('toLastWidth', toLastWidth);\n    if (fromLastWidth > toLastWidth || !fromLastWidth) {\n      this.setState({numFrom:'empty', numTo: 'empty', error: true}, () => {\n        setTimeout(() => {\n          this.setState({error: false})\n        }, 600)\n      })\n      return \n    }\n    pyramids[numTo].push(pyramids[numFrom][pyramids[numFrom].length - 1])\n    pyramids[numFrom].pop()\n    this.setState({pyramids, numFrom:'empty', numTo: 'empty',totalNum: this.state.totalNum + 1})\n  }\n\n   render() {\n    let appStyles = {height: `${(this.state.pyramids[0].length + this.state.pyramids[1].length + this.state.pyramids[2].length)*28 + 64}px`}\n    return (\n      <section className={this.state.error ? \"error\" :null}>\n        <aside>{this.state.totalNum}</aside>\n        <div className=\"app\"  style={appStyles}>\n          {this.state.pyramids.map((pyramid, pyramidIndex) => {\n            return  <ul className={pyramidIndex === this.state.numFrom ? 'selected' : null} onClick={() => this.handleSelect(pyramidIndex)}  key={pyramidIndex}>{pyramid.map((pyramidItem, pyramidItemIndex) => {\n                        let style = {width: `${pyramidItem}%`}\n                        return <li style={style} key={pyramidItemIndex}>{pyramidItem}</li>\n                      })}\n\n                    </ul>\n            })}\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}